---
import PageLayout from "../layouts/Layout.astro";
import Navigation from "../components/Navigation.astro";
import MyChart from "../components/solid/chartSample.tsx";
import SidePage from "../components/solid/sidePage";
import LoadDataComponent from "../components/solid/loadData";
import { supabase } from "../lib/supabase";

let storedAccessToken = Astro.cookies.get("stored-sb-access-token");
let storedRefreshToken = Astro.cookies.get("stored-sb-refresh-token");
let storedProviderToken = Astro.cookies.get("stored-sb-provider-token");
let storedProviderRefreshToken = Astro.cookies.get("stored-sb-provider-refresh-token");

if (!storedAccessToken || !storedRefreshToken || !storedProviderToken || !storedProviderRefreshToken) {
  Astro.cookies.set("stored-sb-access-token", { data: [] }, { path: "/" });
  Astro.cookies.set("stored-sb-refresh-token", { data: [] }, { path: "/" });
  Astro.cookies.set("stored-sb-provider-token", { data: [] }, { path: "/" });
  Astro.cookies.set("stored-sb-provider-refresh-token", { data: [] }, { path: "/" });
  storedAccessToken = Astro.cookies.get("stored-sb-access-token");
  storedRefreshToken = Astro.cookies.get("stored-sb-refresh-token");
  storedProviderToken = Astro.cookies.get("stored-sb-provider-token");
  storedProviderRefreshToken = Astro.cookies.get("stored-sb-provider-refresh-token");
}

type storedToken = { data: string[] };
let accessTokenList = (storedAccessToken?.json() as storedToken).data;
const refreshTokenList = (storedRefreshToken?.json() as storedToken).data;
const providerTokenList = (storedProviderToken?.json() as storedToken).data;
const providerRefreshTokenList = (storedProviderRefreshToken?.json() as storedToken).data;

let validAccessTokenList = [];
let validRefreshTokenList = [];
let validProviderTokenList = [];
let validProviderRefreshTokenList = [];
let validSessionList = [];

const tokenListLength = accessTokenList.length;
for (let i = 0; i < tokenListLength; i++) {
  try {
    const session = await supabase.auth.setSession({
      refresh_token: refreshTokenList[i],
      access_token: accessTokenList[i],
    });
    if (session.error) {
      try {
        const session = await supabase.auth.refreshSession({
          refresh_token: refreshTokenList[i],
        });
        if (session.error) continue;
        accessTokenList[i] = session.data.session?.access_token!;
        continue;
      } catch (error) {
        continue;
      }
    }
    validAccessTokenList.push(accessTokenList[i]);
    validRefreshTokenList.push(refreshTokenList[i]);
    validSessionList.push(session);
    validProviderTokenList.push(providerTokenList[i]);
    validProviderRefreshTokenList.push(providerRefreshTokenList[i]);
  } catch (error) {
    continue;
  }
}

Astro.cookies.set("stored-sb-access-token", { data: validAccessTokenList }, { path: "/" });
Astro.cookies.set("stored-sb-refresh-token", { data: validRefreshTokenList }, { path: "/" });
Astro.cookies.set("stored-sb-provider-token", { data: validProviderTokenList }, { path: "/" });
Astro.cookies.set("stored-sb-provider-refresh-token", { data: validProviderRefreshTokenList }, { path: "/" });
---

<PageLayout>
  <!-- <div> -->
  <div class="isolate h-full">

    {
      validSessionList.map((session, idx) => (
        <astro-data-account-info
          data-access-token={session?.data.session?.access_token}
          data-refresh-token={session?.data.session?.refresh_token}
          data-provider-token={validProviderTokenList[idx]}
          data-provider-refresh-token={validProviderRefreshTokenList[idx]}
          data-provider={session?.data.session?.user.app_metadata.provider}
          data-username={session?.data.session?.user.user_metadata.name}
          data-email={session?.data.user?.email}
          class="hidden"
        />
      ))
    }
    <Navigation filled={false} />
    <div class="h-full flex bg-base-200">
      <div class="h-full flex-1"></div>
      <div class="h-full w-2xs max-xl:hidden">
        <div
          class="absolute top-16 mx-3 w-[calc(var(--container-2xs)-var(--spacing)*6)] h-[calc(100dvh-(var(--spacing)*16))]"
        >
          <div class="sticky top-16 bottom-0 overflow-y-auto w-full h-full">
            <div
              class="bg-base-100 w-64 h-full w-full"
            >
              <ul
                class="menu text-base-content px-4 w-content w-full grid grid-cols pt-8 py-16"
              >
                <SidePage client:only="solid-js" />
              </ul>
            </div>
          </div>
        </div>
      </div>
      <div class="h-full min-w-4xl flex-1 bg-base-100">
        <div
          class="absolute top-16 w-4xl"
        >
        <div class="sticky top-16 bottom-0 overflow-y-auto w-full h-[calc(100dvh-(var(--spacing)*16))]">
            <div class="w-full px-8">
              <div id="load-data w-full ">
                <div class="h-8"></div>
                <h1 class="text-2xl font-semibold py-2">Load Data</h1>
                <LoadDataComponent client:only="solid-js" />
              </div>

              <!-- <MyChart client:only="solid-js" /> -->
            </div>
          </div>
        </div>
      </div>
      <div class="h-full w-2xs max-2xl:hidden">
        <div
          class="absolute top-16 mx-3 w-[calc(var(--container-2xs)-var(--spacing)*6)] h-[calc(100dvh-(var(--spacing)*16))]"
        >
          <div class="sticky top-16 bottom-0 overflow-y-auto w-full h-full">
            <div
              class="bg-base-100 w-64 h-full w-full"
            >
              <ul
                class="menu text-base-content px-4 w-content w-full grid grid-cols pt-8 py-16"
              >
                <li><a href="#load-data">Load Data</a></li>
                <li><a>Slect Items</a></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      <div class="h-full flex-1"></div>
    </div>
  </div>
  <!-- </div> -->
</PageLayout>

<script>
  import { createUniqueId } from "solid-js";
  import { resetSession, setSession } from "../components/states/persistentSupabaseSessionAtom";
  resetSession();

  class AstroDataAccountInfo extends HTMLElement {
    constructor() {
      super();
      const accessToken = this.dataset.accessToken!;
      const refreshToken = this.dataset.refreshToken!;
      const email = this.dataset.email!;
      const provider = this.dataset.provider!;
      const username = this.dataset.username!;
      const providerToken = this.dataset.providerToken!;
      const providerRefreshToken = this.dataset.providerRefreshToken!;

      setSession({ id: createUniqueId(), accessToken, refreshToken, email, provider, username, providerToken, providerRefreshToken})
    }
  }

  customElements.define("astro-data-account-info", AstroDataAccountInfo);
</script>