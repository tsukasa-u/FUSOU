// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/helloworld.proto

package helloworldconnect

import (
	helloworld "GoProxyServer/protos"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreetingServiceName is the fully-qualified name of the GreetingService service.
	GreetingServiceName = "helloworld.GreetingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetingServiceHelloProcedure is the fully-qualified name of the GreetingService's Hello RPC.
	GreetingServiceHelloProcedure = "/helloworld.GreetingService/Hello"
	// GreetingServiceDownstreamHelloProcedure is the fully-qualified name of the GreetingService's
	// DownstreamHello RPC.
	GreetingServiceDownstreamHelloProcedure = "/helloworld.GreetingService/DownstreamHello"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	greetingServiceServiceDescriptor               = helloworld.File_protos_helloworld_proto.Services().ByName("GreetingService")
	greetingServiceHelloMethodDescriptor           = greetingServiceServiceDescriptor.Methods().ByName("Hello")
	greetingServiceDownstreamHelloMethodDescriptor = greetingServiceServiceDescriptor.Methods().ByName("DownstreamHello")
)

// GreetingServiceClient is a client for the helloworld.GreetingService service.
type GreetingServiceClient interface {
	// define methods of which the service has
	Hello(context.Context, *connect.Request[helloworld.HelloRequest]) (*connect.Response[helloworld.HelloResponse], error)
	DownstreamHello(context.Context, *connect.Request[helloworld.HelloRequest]) (*connect.ServerStreamForClient[helloworld.HelloResponse], error)
}

// NewGreetingServiceClient constructs a client for the helloworld.GreetingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreetingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetingServiceClient{
		hello: connect.NewClient[helloworld.HelloRequest, helloworld.HelloResponse](
			httpClient,
			baseURL+GreetingServiceHelloProcedure,
			connect.WithSchema(greetingServiceHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		downstreamHello: connect.NewClient[helloworld.HelloRequest, helloworld.HelloResponse](
			httpClient,
			baseURL+GreetingServiceDownstreamHelloProcedure,
			connect.WithSchema(greetingServiceDownstreamHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// greetingServiceClient implements GreetingServiceClient.
type greetingServiceClient struct {
	hello           *connect.Client[helloworld.HelloRequest, helloworld.HelloResponse]
	downstreamHello *connect.Client[helloworld.HelloRequest, helloworld.HelloResponse]
}

// Hello calls helloworld.GreetingService.Hello.
func (c *greetingServiceClient) Hello(ctx context.Context, req *connect.Request[helloworld.HelloRequest]) (*connect.Response[helloworld.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// DownstreamHello calls helloworld.GreetingService.DownstreamHello.
func (c *greetingServiceClient) DownstreamHello(ctx context.Context, req *connect.Request[helloworld.HelloRequest]) (*connect.ServerStreamForClient[helloworld.HelloResponse], error) {
	return c.downstreamHello.CallServerStream(ctx, req)
}

// GreetingServiceHandler is an implementation of the helloworld.GreetingService service.
type GreetingServiceHandler interface {
	// define methods of which the service has
	Hello(context.Context, *connect.Request[helloworld.HelloRequest]) (*connect.Response[helloworld.HelloResponse], error)
	DownstreamHello(context.Context, *connect.Request[helloworld.HelloRequest], *connect.ServerStream[helloworld.HelloResponse]) error
}

// NewGreetingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetingServiceHandler(svc GreetingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greetingServiceHelloHandler := connect.NewUnaryHandler(
		GreetingServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(greetingServiceHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	greetingServiceDownstreamHelloHandler := connect.NewServerStreamHandler(
		GreetingServiceDownstreamHelloProcedure,
		svc.DownstreamHello,
		connect.WithSchema(greetingServiceDownstreamHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/helloworld.GreetingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreetingServiceHelloProcedure:
			greetingServiceHelloHandler.ServeHTTP(w, r)
		case GreetingServiceDownstreamHelloProcedure:
			greetingServiceDownstreamHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreetingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetingServiceHandler struct{}

func (UnimplementedGreetingServiceHandler) Hello(context.Context, *connect.Request[helloworld.HelloRequest]) (*connect.Response[helloworld.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("helloworld.GreetingService.Hello is not implemented"))
}

func (UnimplementedGreetingServiceHandler) DownstreamHello(context.Context, *connect.Request[helloworld.HelloRequest], *connect.ServerStream[helloworld.HelloResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("helloworld.GreetingService.DownstreamHello is not implemented"))
}
